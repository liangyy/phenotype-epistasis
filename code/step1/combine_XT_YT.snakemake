# this module combines to genotype data sets (affected and unaffected populations) in plink binary format
# outputs a combined data sets with quality control

## for debug
def get_all(config):
    out = []
    nchr_info = config['chr-list'].split(',')
    nchr_name = nchr_info[0]
    nchr_info = nchr_info[1].split(':')
    nchr_from = int(nchr_info[0])
    nchr_to = int(nchr_info[1])
    for i in range(nchr_from, nchr_to + 1):
        out.append('output-combine_XT_YT/{geno1}__{geno2}/merge_QC.{chr}.bed'.format(geno1 = config['x1'], geno2 = config['x2'], chr = nchr_name + str(i)))
    return out

rule all_XTYT:
    input:
        get_all(config)
## end debug

rule add_phenotype:
    input:
        # lambda wildcards: (config[wildcards.genotype]['combine_XT']['name-format'] + '.fam').format(chr = wildcards.chr)
        'output-prepare_XT/{genotype}/plink.{chr}.fam'
    params:
        label = lambda wildcards: config[wildcards.genotype]['combine_XT_YT']['case-control']
    output:
        'output-combine_XT_YT/{genotype}/premerge.{chr}.fam.temp'
    shell:
        '''
        bash scripts/add_phenotype.sh -p {params.label} -i {input[0]} -o {output[0]}
        '''

rule update_id:
    input:
        bed = 'output-prepare_XT/{genotype}/plink.{chr}.bed',
        bim = 'output-prepare_XT/{genotype}/plink.{chr}.bim',
        fam = temp('output-combine_XT_YT/{genotype}/premerge.{chr}.fam.temp')
    params:
        label = lambda wildcards: config[wildcards.genotype]['combine_XT_YT']['case-control'],
        name = 'output-combine_XT_YT/{genotype}/premerge.{chr}'
    output:
        'output-combine_XT_YT/{genotype}/premerge.{chr}.bed',
        'output-combine_XT_YT/{genotype}/premerge.{chr}.bim',
        'output-combine_XT_YT/{genotype}/premerge.{chr}.fam'
    shell:
        '''
        bash scripts/update_id.sh -p {params.label} -e {input[0]} -i {input[1]} -f {input[2]} -o {params.name}
        '''

rule generate_merge_list:
    params:
        geno2 = 'output-combine_XT_YT/{geno2}/premerge.{chr}'
    output:
        'output-combine_XT_YT/{geno1}__{geno2}/merge_list.{chr}.txt'
    shell:
        '''
        echo '{params.geno2}.bed {params.geno2}.bim {params.geno2}.fam' > {output[0]}
        '''

rule merge_genos:
    input:
        # lambda wildcards: (config[wildcards.geno1]['combine_XT']['name-format'] + '.bim').format(chr = wildcards.chr),
        # lambda wildcards: (config[wildcards.geno2]['combine_XT']['name-format'] + '.bim').format(chr = wildcards.chr),
        # lambda wildcards: (config[wildcards.geno1]['combine_XT']['name-format'] + '.bed').format(chr = wildcards.chr),
        # lambda wildcards: (config[wildcards.geno2]['combine_XT']['name-format'] + '.bed').format(chr = wildcards.chr),
        fam1 = temp('output-combine_XT_YT/{geno1}/premerge.{chr}.fam'),
        fam2 = temp('output-combine_XT_YT/{geno2}/premerge.{chr}.fam'),
        bed1 = temp('output-combine_XT_YT/{geno1}/premerge.{chr}.bed'),
        bde2 = temp('output-combine_XT_YT/{geno2}/premerge.{chr}.bed'),
        bim1 = temp('output-combine_XT_YT/{geno1}/premerge.{chr}.bim'),
        bim2 = temp('output-combine_XT_YT/{geno2}/premerge.{chr}.bim'),
        mlist = temp('output-combine_XT_YT/{geno1}__{geno2}/merge_list.{chr}.txt')
    params:
        out = 'output-combine_XT_YT/{geno1}__{geno2}/merge.{chr}'
    output:
        'output-combine_XT_YT/{geno1}__{geno2}/merge.{chr}.bim',
        'output-combine_XT_YT/{geno1}__{geno2}/merge.{chr}.bed',
        'output-combine_XT_YT/{geno1}__{geno2}/merge.{chr}.fam'
    shell:
        '''
        # plink --noweb --bim {input.bim1} --bed {input.bed1} --fam {input.fam1} --merge-list {input.mlist} --make-bed --out {params.out}
        python scripts/plink_merge_wrapper.py \
            --bim1 {input.bim1} \
            --bed1 {input.bed1} \
            --fam1 {input.fam1} \
            --merge_list {input.mlist} \
            --out_prefix {params.out}
        '''

rule quality_control:
    input:
        'output-combine_XT_YT/{geno1}__{geno2}/merge.{chr}.bim',
        'output-combine_XT_YT/{geno1}__{geno2}/merge.{chr}.bed',
        'output-combine_XT_YT/{geno1}__{geno2}/merge.{chr}.fam'
    output:
        'output-combine_XT_YT/{geno1}__{geno2}/merge_QC.{chr}.bim',
        'output-combine_XT_YT/{geno1}__{geno2}/merge_QC.{chr}.bed',
        'output-combine_XT_YT/{geno1}__{geno2}/merge_QC.{chr}.fam'
    params:
        i = 'output-combine_XT_YT/{geno1}__{geno2}/merge.{chr}',
        o = 'output-combine_XT_YT/{geno1}__{geno2}/merge_QC.{chr}',
        hwe = config['quality-control']['hwe'],
        maf = config['quality-control']['maf'],
        geno = config['quality-control']['geno']
    shell:
        '''
        plink --noweb --bfile {params.i} --make-bed --mind 1 --maf {params.maf} --geno {params.geno} --hwe {params.hwe} --out {params.o}
        '''
