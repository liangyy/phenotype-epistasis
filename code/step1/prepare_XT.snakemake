# this module takes genotype-mean-[chr] and snp-list-[chr] as input and output plink-[chr] files in PLINK format which is ready for LDpred

## for debug
def get_all(config):
    out = []
    nchr_info = config[config['x']]['prepare_XT']['chr-list'].split(',')
    nchr_name = nchr_info[0]
    nchr_info = nchr_info[1].split(':')
    nchr_from = int(nchr_info[0])
    nchr_to = int(nchr_info[1])
    for i in range(nchr_from, nchr_to + 1):
        out.append('output-prepare_XT/{disease}/plink.{chr}.bed'.format(disease = config['x'], chr = nchr_name + str(i)))
    return out

rule all_XT:
    input:
        get_all(config)
## debug end

rule mean2dist:
    input:
        lambda wildcards: config[wildcards.disease]['prepare_XT']['geno-mean']['name-format'].format(chr = wildcards.chr)
    output:
        'output-prepare_XT/{disease}/genotype-dist-flip.{chr}.txt.gz'
    shell:
        'python scripts/mean2dist.py --input {input[0]} --output {output[0]}'

rule gen_snpinfo:
    input:
        lambda wildcards: config[wildcards.disease]['prepare_XT']['snp-list']['name-format'].format(chr = wildcards.chr),
        lambda wildcards: config[wildcards.disease]['prepare_XT']['geno-mean']['name-format'].format(chr = wildcards.chr)
    output:
        'output-prepare_XT/{disease}/bimbam-snpinfo-flip.{chr}.txt.gz'
    shell:
        'bash scripts/gen_snpinfo.sh -i {input[0]} -g {input[1]} -o {output[0]}'

rule fcgene:
    input:
        'output-prepare_XT/{disease}/genotype-dist-flip.{chr}.txt.gz',
        'output-prepare_XT/{disease}/bimbam-snpinfo-flip.{chr}.txt.gz'
    output:
        'output-prepare_XT/{disease}/plink.{chr}.bed',
        'output-prepare_XT/{disease}/plink.{chr}.bim',
        'output-prepare_XT/{disease}/plink.{chr}.fam'
    shell:
        'fcgene --wgd {input[0]} --pos {input[1]} --oformat plink-bed --out output-prepare_XT/{wildcards.disease}/plink.{wildcards.chr}'
