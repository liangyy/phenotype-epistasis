# this module run ldpred in P+T or LDpred mode
# this module obtain polygenic risk score
# Note that PRS computed in LDpred shifts a same constant for all individual so the value of PRS_ldpred is not meaningful but the relative amount is meaningful

include: 'prepare_XT.snakemake'
include: 'prepare_betaI.snakemake'
include: 'combine_XT_YT.snakemake'

def get_ldpred_outputs(prefix, fs):
    fs = fs.split(',')
    try:
        fs = [ float(f) for f in fs ]
        out = []
        for f in fs:
            out.append('%s_LDpred_p%0.4e.txt' % (prefix, f))
    except ValueError:
        out = '%s_LDpred_p%s.txt' % (prefix, fs[0])
        # print(out)
    return out

def get_ldpred_outputs_ext(prefix, fs, ext):
    fs = fs.split(',')
    try:
        fs = [ float(f) for f in fs ]
        out = []
        for f in fs:
            out.append('%s_LDpred_p%0.4e%s' % (prefix, f, ext))
    except ValueError:
        out = '%s_LDpred_p%s%s' % (prefix, fs[0], ext)
        # print(out)
    return out

# def get_all_chr(string, nchr_info):
#     out = []
#     nchr_info = nchr_info.split(',')
#     nchr_name = nchr_info[0]
#     nchr_info = nchr_info[1].split(':')
#     nchr_from = int(nchr_info[0])
#     nchr_to = int(nchr_info[1])
#     for i in range(nchr_from, nchr_to + 1):
#         out.append(string.format(chr = nchr_name + str(i)))
#     # print(out)
#     return out

## pipeline output
def get_all(config, mtd):
    out = get_ldpred_outputs('output-run_step1/{intermediate}__{geno1}__{geno2}/{method}'.format(intermediate = config['y'], geno1 = config['x1'], geno2 = config['x2'], chr = 'all', method = mtd), config['ldpred']['causal-fraction'])
    return out

rule all_pt:
    input:
        get_all(config, 'ptYI')
rule all_ldpred:
    input:
        get_all(config, 'ldpredYI')
## pipeline output end



ldpred_dir = config['ldpred-dir']

rule gen_coordinate:
    input:
        beta_ss = 'output-prepare_betaI/{intermediate}/beta-ss.txt.gz',
        geno_plink1 = 'output-combine_XT_YT/{geno1}__{geno2}/merge_QC.bed',
        geno_plink2 = 'output-combine_XT_YT/{geno1}__{geno2}/merge_QC.bim',
        geno_plink3 = 'output-combine_XT_YT/{geno1}__{geno2}/merge_QC.fam'
    params:
        geno_plink = 'output-combine_XT_YT/{geno1}__{geno2}/merge_QC',
        nsamples = lambda wildcards: config[wildcards.intermediate]['nsamples']
    output:
        'output-run_step1/{intermediate}__{geno1}__{geno2}/coordinate.hdf5'
    shell:
        'python {ldpred_dir}/coord_genotypes.py \
            --gf {params.geno_plink} \
            --ssf <(zcat < {input.beta_ss}) \
            --N {params.nsamples} \
            --out {output[0]}'

rule get_ld_radius:
    input:
        'output-run_step1/{intermediate}__{geno1}__{geno2}/coordinate.hdf5'
    params:
        config['ldpred']['num-SNPs-per-xMb']
    output:
        'output-run_step1/{intermediate}__{geno1}__{geno2}/ld-radius.yaml'
    shell:
        'python scripts/get_ld_radius.py \
            --input {input[0]} \
            --per_x_mb {params[0]} \
            --output {output[0]}'

rule run_ldpred:
    input:
        'output-run_step1/{intermediate}__{geno1}__{geno2}/coordinate.hdf5',
        'output-run_step1/{intermediate}__{geno1}__{geno2}/ld-radius.yaml'
    params:
        config['ldpred']['causal-fraction'],
        'output-run_step1/{intermediate}__{geno1}__{geno2}/ldpred',
        lambda wildcards: config[wildcards.intermediate]['nsamples']
    output:
        get_ldpred_outputs('output-run_step1/{intermediate}__{geno1}__{geno2}/ldpred', config['ldpred']['causal-fraction'])
    shell:
        'python scripts/ldpred_wrapper.py --coord {input[0]} \
            --ld_radius {input[1]} \
            --ldpred_dir {ldpred_dir} \
            --causal_fraction {params[0]} \
            --nsamples {params[2]} \
            --prefix_of_pickle output-run_step1/{wildcards.intermediate}__{wildcards.geno1}__{wildcards.geno2}/coordinate \
            --out {params[1]}'

rule get_prs_ldpred:
    input:
        'output-combine_XT_YT/{geno1}__{geno2}/merge_QC.bim',
        'output-combine_XT_YT/{geno1}__{geno2}/merge_QC.bed',
        'output-combine_XT_YT/{geno1}__{geno2}/merge_QC.fam',
        get_ldpred_outputs('output-run_step1/{intermediate}__{geno1}__{geno2}/ldpred', config['ldpred']['causal-fraction'])
    params:
        inprefix = 'output-combine_XT_YT/{geno1}__{geno2}/merge_QC',
        rfprefix = 'output-run_step1/{intermediate}__{geno1}__{geno2}/ldpred',
        fractions = config['ldpred']['causal-fraction'],
        outprefix = 'output-run_step1/{intermediate}__{geno1}__{geno2}/ldpredYI'
    output:
        get_ldpred_outputs('output-run_step1/{intermediate}__{geno1}__{geno2}/ldpredYI', config['ldpred']['causal-fraction'])
    shell:
        'python {ldpred_dir}/validate.py \
            --vgf {params.inprefix} \
            --rf {params.rfprefix} \
            --PS {params.fractions} \
            --out {params.outprefix}'

rule compare_prs_and_original:
    input:
        files = get_ldpred_outputs_ext('output-run_step1/{intermediate}__{geno1}__{geno2}/ldpred', config['ldpred']['causal-fraction'], 'txt'),
        ss = 'output-prepare_betaI/{intermediate}/beta-ss.txt.gz'
    params:
        fraction = config['ldpred']['causal-fraction']
        out_prefix = 'output-run_step1/{intermediate}__{geno1}__{geno2}/ldpred-combine'
    output:
        get_ldpred_outputs_ext('output-run_step1/{intermediate}__{geno1}__{geno2}/ldpred-combine', config['ldpred']['causal-fraction'], 'txt.gz')
    shell:
        'python scripts/compare_prs_and_original_wrapper.py --inputs {input.files} --summary_statistic {input.ss} --fraction {params.fraction} --out_prefix {params.out_prefix}'

#         'Rscript scripts/combine_prs.R -i {params[0]} -o {output[0]}'
