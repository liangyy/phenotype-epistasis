# this module run ldpred in P+T or LDpred mode
# this module obtain polygenic risk score
# Note that PRS computed in LDpred shifts a same constant for all individual so the value of PRS_ldpred is not meaningful but the relative amount is meaningful

include: 'prepare_XT.snakemake'
include: 'prepare_betaI.snakemake'
include: 'combine_XT_YT.snakemake'

def get_ldpred_outputs(prefix, fs):
    fs = fs.split(',')
    try:
        fs = [ float(f) for f in fs ]
        out = []
        for f in fs:
            out.append('%s_LDpred_p%0.4e.txt' % (prefix, f))
    except ValueError:
        out = '%s_LDpred_p%s.txt' % (prefix, fs[0])
        # print(out)
    return out

# def get_all_chr(string, nchr_info):
#     out = []
#     nchr_info = nchr_info.split(',')
#     nchr_name = nchr_info[0]
#     nchr_info = nchr_info[1].split(':')
#     nchr_from = int(nchr_info[0])
#     nchr_to = int(nchr_info[1])
#     for i in range(nchr_from, nchr_to + 1):
#         out.append(string.format(chr = nchr_name + str(i)))
#     # print(out)
#     return out

## pipeline output
def get_all(config, mtd):
    out = get_ldpred_outputs('output-run_step1/{intermediate}__{geno1}__{geno2}/{method}'.format(intermediate = config['y'], geno1 = config['x1'], geno2 = config['x2'], chr = 'all', method = mtd), config['ldpred']['causal-fraction'])
    return out

rule all_pt:
    input:
        get_all(config, 'ptYI')
rule all_ldpred:
    input:
        get_all(config, 'ldpredYI')
## pipeline output end



ldpred_dir = config['ldpred-dir']

rule gen_coordinate:
    input:
        beta_ss = 'output-prepare_betaI/{intermediate}/beta-ss.txt.gz',
        geno_plink1 = 'output-combine_XT_YT/{geno1}__{geno2}/merge_QC.bed',
        geno_plink2 = 'output-combine_XT_YT/{geno1}__{geno2}/merge_QC.bim',
        geno_plink3 = 'output-combine_XT_YT/{geno1}__{geno2}/merge_QC.fam'
    params:
        geno_plink = 'output-combine_XT_YT/{geno1}__{geno2}/merge_QC',
        nsamples = lambda wildcards: config[wildcards.intermediate]['nsamples']
    output:
        'output-run_step1/{intermediate}__{geno1}__{geno2}/coordinate.hdf5'
    shell:
        'python {ldpred_dir}/coord_genotypes.py \
            --gf {params.geno_plink} \
            --ssf <(zcat < {input.beta_ss}) \
            --N {params.nsamples} \
            --out {output[0]}'

rule get_ld_radius:
    input:
        'output-run_step1/{intermediate}__{geno1}__{geno2}/coordinate.hdf5'
    params:
        config['ldpred']['num-SNPs-per-xMb']
    output:
        'output-run_step1/{intermediate}__{geno1}__{geno2}/ld-radius.yaml'
    shell:
        'python scripts/get_ld_radius.py \
            --input {input[0]} \
            --per_x_mb {params[0]} \
            --output {output[0]}'

rule run_ldpred:
    input:
        'output-run_step1/{intermediate}__{geno1}__{geno2}/coordinate.hdf5',
        'output-run_step1/{intermediate}__{geno1}__{geno2}/ld-radius.yaml'
    params:
        config['ldpred']['causal-fraction'],
        'output-run_step1/{intermediate}__{geno1}__{geno2}/ldpred',
        lambda wildcards: config[wildcards.intermediate]['nsamples']
    output:
        get_ldpred_outputs('output-run_step1/{intermediate}__{geno1}__{geno2}/ldpred', config['ldpred']['causal-fraction'])
    shell:
        'python scripts/ldpred_wrapper.py --coord {input[0]} \
            --ld_radius {input[1]} \
            --ldpred_dir {ldpred_dir} \
            --causal_fraction {params[0]} \
            --nsamples {params[2]} \
            --prefix_of_pickle output-run_step1/{wildcards.intermediate}__{wildcards.geno1}__{wildcards.geno2}/coordinate \
            --out {params[1]}'

rule get_prs_ldpred:
    input:
        'output-combine_XT_YT/{geno1}__{geno2}/merge_QC.bim',
        'output-combine_XT_YT/{geno1}__{geno2}/merge_QC.bed',
        'output-combine_XT_YT/{geno1}__{geno2}/merge_QC.fam',
        get_ldpred_outputs('output-run_step1/{intermediate}__{geno1}__{geno2}/ldpred', config['ldpred']['causal-fraction'])
    params:
        inprefix = 'output-combine_XT_YT/{geno1}__{geno2}/merge_QC',
        rfprefix = 'output-run_step1/{intermediate}__{geno1}__{geno2}/ldpred',
        fractions = config['ldpred']['causal-fraction'],
        outprefix = 'output-run_step1/{intermediate}__{geno1}__{geno2}/ldpredYI'
    output:
        get_ldpred_outputs('output-run_step1/{intermediate}__{geno1}__{geno2}/ldpredYI', config['ldpred']['causal-fraction'])
    shell:
        'python {ldpred_dir}/validate.py \
            --vgf {params.inprefix} \
            --rf {params.rfprefix} \
            --PS {params.fractions} \
            --out {params.outprefix}'

rule get_original_beta:
    input:
        infile = get_ldpred_outputs('output-run_step1/{intermediate}__{geno1}__{geno2}/ldpred', config['ldpred']['causal-fraction'].split(',')[0]),
        ss = 'output-run_step1/{intermediate}__{geno1}__{geno2}/coordinate.hdf5'
    output:
        'output-run_step1/{intermediate}__{geno1}__{geno2}/ldpred-ori-beta.txt.gz'
    shell:
        'python scripts/get_original_beta.py --input {input.infile} --coordinate {input.ss} --out {output[0]}'

rule report_comparison_rmd:
    input:
        ori_beta = 'output-run_step1/{intermediate}__{geno1}__{geno2}/ldpred-ori-beta.txt.gz',
        computed_betas = get_ldpred_outputs('output-run_step1/{intermediate}__{geno1}__{geno2}/ldpred', config['ldpred']['causal-fraction'])
    params:
        fractions = config['ldpred']['causal-fraction'],
        files = ':'.join(get_ldpred_outputs('output-run_step1/{intermediate}__{geno1}__{geno2}/ldpred', config['ldpred']['causal-fraction']))
    output:
        temp('output-run_step1/{intermediate}__{geno1}__{geno2}/prs_report.Rmd')
    run:
        rmd = '''---
title: "Polygenic risk score - Y ({y}); I ({i})"
date: "`r format(Sys.time(), '%B %d, %Y')`"
author: Yanyu Liang
output:
  html_document:
    toc: true
    toc_float: true
---

```{{r setup, echo=FALSE}}
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
library(ggplot2)
source('../../step2/scripts/myRLib.R')
knitr::opts_knit$set(root.dir = '../../')
```

# Read data

```{{r}}
beta.ori <- read.table('{ori_beta}', header = T)
beta.ori$sid <- as.character(beta.ori$sid)
beta.ori <- beta.ori[order(beta.ori$sid), ]
files <- strsplit('{files}', ':')[[1]]
ps <- strsplit('{fractions}', ',')[[1]]
```

# Plot

```{{r, results='asis'}}
for(i in 1 : length(ps)) {{
  file.i <- files[i]
  p.i <- ps[i]
  cat('##', p.i, '\n')
  cat('\n')
  prs.i <- read.table(file.i, header = T)
  prs.i$sid <- as.character(prs.i$sid)
  prs.i <- prs.i[order(prs.i$sid), ]
  prs.i$log_odds <- correctAllele(prs.i$nt2, prs.i$nt1, beta.ori$a1, beta.ori$log_odds)
  prs.i$ori_beta <- correctAllele(prs.i$nt2, prs.i$nt1, beta.ori$a1, beta.ori$beta_ori)
  p1<- ggplot(prs.i) + geom_histogram(aes(x = ori_beta, fill = 'Original Beta'), alpha = .3, bins = 1e2) + geom_histogram(aes(x = ldpred_beta, fill = 'LDpred Beta'), alpha = .3, bins = 1e2) + ggtitle('Histogram of Beta') + xlab('Beta')
  df <- data.frame(x = prs.i$ori_beta, y = prs.i$ldpred_beta)
  p2 <- ggplot(data = prs.i, aes(x = ori_beta, y = ldpred_beta)) + geom_point() + geom_smooth(method = "lm", se=FALSE, color="black", formula = y ~ 0 + x) + geom_text(x = quantile(df$x, 0.1), y = quantile(df$y, 0.99), label = lm_eqn_nointer(df), parse = TRUE) + xlab('Original Beta') + ylab('LDpred Beta') + ggtitle('Ldpred vs. Raw Beta')
  print(p1)
  print(p2)
  cat('\n')
  cat('\n')
}}
```
'''.format(ori_beta = input.ori_beta, files = params.files, fractions = params.fractions, y = wildcards.geno1, i = wildcards.intermediate)
        o = open(output[0], 'w')
        o.write(rmd)
        o.close()

rule report_comparison_html:
    input:
        'output-run_step1/{intermediate}__{geno1}__{geno2}/prs_report.Rmd'
    output:
        'output-run_step1/{intermediate}__{geno1}__{geno2}/prs_report.html'
    shell:
        '''
        R -e "rmarkdown::render('{input[0]}')"
        '''
