# this module computes the association of XT againist YT
# this module compute the direction of YI on YT
# and combined direction

def get_format(replace_str, config):
    string = config[replace_str]['name-format'].format(replace = replace_str)
    return string

def get_ldpred_outputs_ext(prefix, fs, ext):
    fs = fs.split(',')
    try:
        fs = [ float(f) for f in fs ]
        out = []
        for f in fs:
            out.append('%s_LDpred_p%0.4e%s' % (prefix, f, ext))
    except ValueError:
        out = '%s_LDpred_p%s%s' % (prefix, fs[0], ext)
        # print(out)
    return out

## for debug
def get_xtyi(config):
    out = get_ldpred_outputs_ext('output-direction_XT_YI/{yt}/xtyi'.format(yt = config['y'] + '__' + config['x1'] + '__' + config['x2']), config['ldpred']['causal-fraction'], '.assoc.logistic')
    return out
def get_xt(config):
    out = 'output-direction_XT_YI/{yt}/xt.assoc.logistic'.format(yt = config['y'] + '__' + config['x1'] + '__' + config['x2'])
    return out
def get_yi(config):
    out = 'output-direction_XT_YI/{intermediate}__{geno1}__{geno2}/yi.logistic.assoc'.format(intermediate = config['y'], geno1 = config['x1'], geno2 = config['x2'])
    return out
def get_plot(config):
    out = 'output-direction_XT_YI/{intermediate}__{geno1}__{geno2}/direction_report.html'.format(intermediate = config['y'], geno1 = config['x1'], geno2 = config['x2'])
    return out
rule all_XTYI:
    input:
        get_xtyi(config)
rule all_XT:
    input:
        get_xt(config)
rule all_YI:
    input:
        get_yi(config)
rule all_plot:
    input:
        get_plot(config)
## end debug

rule direction_xt:
    input:
        e = lambda wildcards: get_format(wildcards.geno1 + '__' + wildcards.geno2, config) + '.bed',
        i = lambda wildcards: get_format(wildcards.geno1 + '__' + wildcards.geno2, config) + '.bim',
        f = lambda wildcards: get_format(wildcards.geno1 + '__' + wildcards.geno2, config) + '.fam'
    params:
        lambda wildcards: get_format(wildcards.geno1 + '__' + wildcards.geno2, config),
        'output-direction_XT_YI/{intermediate}__{geno1}__{geno2}/xt'
    output:
        'output-direction_XT_YI/{intermediate}__{geno1}__{geno2}/xt.assoc.logistic'
    shell:
        'plink --noweb --allow-no-sex --bed {input.e} --bim {input.i} --fam {input.f} --logistic --out {params[1]}'

rule prepare_covar:
    input:
        '../step1/output-run_step1/{intermediate}__{geno1}__{geno2}/ldpredYI_LDpred_p{pval}.txt',
        lambda wildcards: get_format(wildcards.geno1 + '__' + wildcards.geno2, config) + '.fam'
    output:
        'output-direction_XT_YI/{intermediate}__{geno1}__{geno2}/covar_LDpred_p{pval}.txt'
    shell:
        'Rscript scripts/prepare_covar.R -i {input[0]} -o {output[0]} -f {input[1]}'

rule direction_yi:
    input:
        get_ldpred_outputs_ext('output-direction_XT_YI/{intermediate}__{geno1}__{geno2}/covar', config['ldpred']['causal-fraction'], '.txt')
    params:
        ':'.join(get_ldpred_outputs_ext('output-direction_XT_YI/{intermediate}__{geno1}__{geno2}/covar', config['ldpred']['causal-fraction'], '.txt'))
    output:
        'output-direction_XT_YI/{intermediate}__{geno1}__{geno2}/yi.logistic.assoc'
    shell:
        'Rscript scripts/direction_yi.R --inputs {params[0]} \
            --output {output[0]}'

rule direction_xt_yi:
    input:
        yi = get_ldpred_outputs_ext('output-direction_XT_YI/{intermediate}__{geno1}__{geno2}/covar', '{pval}', '.txt'),
        e = lambda wildcards: get_format(wildcards.geno1 + '__' + wildcards.geno2, config) + '.bed',
        i = lambda wildcards: get_format(wildcards.geno1 + '__' + wildcards.geno2, config) + '.bim',
        f = lambda wildcards: get_format(wildcards.geno1 + '__' + wildcards.geno2, config) + '.fam'
    params:
        genotype = lambda wildcards: get_format(wildcards.geno1 + '__' + wildcards.geno2, config),
        oprefix = lambda wildcards:  get_ldpred_outputs_ext('output-direction_XT_YI/{i}__{g1}__{g2}/xtyi'.format(i = wildcards.intermediate, g1 = wildcards.geno1, g2 = wildcards.geno2), wildcards.pval, '')
    output:
        o = get_ldpred_outputs_ext('output-direction_XT_YI/{intermediate}__{geno1}__{geno2}/xtyi', '{pval}', '.assoc.logistic'),
    shell:
        'python scripts/direction_xtyi.py --inputs {input.yi} --outputs {params.oprefix} --geno_prefix {params.genotype}'

rule plot_report:
    input:
        xtyi = get_ldpred_outputs_ext('output-direction_XT_YI/{intermediate}__{geno1}__{geno2}/xtyi', config['ldpred']['causal-fraction'], '.assoc.logistic'),
        xt = 'output-direction_XT_YI/{intermediate}__{geno1}__{geno2}/xt.assoc.logistic',
        yi = 'output-direction_XT_YI/{intermediate}__{geno1}__{geno2}/yi.logistic.assoc'
    params:
        files = lambda wildcards: ':'.join(get_ldpred_outputs_ext('output-direction_XT_YI/{i}__{g1}__{g2}/xtyi'.format(i = wildcards.intermediate, g1 = wildcards.geno1, g2 = wildcards.geno2), config['ldpred']['causal-fraction'], '.assoc.logistic')),
        pvals = ':'.join(config['ldpred']['causal-fraction'].split(',')),
        y = config['x1'],
        i = config['y']
    output:
        temp('output-direction_XT_YI/{intermediate}__{geno1}__{geno2}/direction_report.Rmd')
    run:
        rmd = '''---
title: "Direction - Y ({y}); I ({i})"
date: "`r format(Sys.time(), '%B %d, %Y')`"
author: Yanyu Liang
output:
  html_document:
    toc: true
    toc_float: true
---

```{{r setup, echo=FALSE}}
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
library(ggplot2)
library(pander)
panderOptions('knitr.auto.asis', FALSE)
panderOptions('table.split.table', Inf)
knitr::opts_knit$set(root.dir = '../../')
```

# Read data

```{{r}}
source('scripts/myRLib.R')
xt <- read.table('{xt}', header= T)
xt$SNP <- as.character(xt$SNP)
xt <- xt[order(xt$SNP), ]
yi <- read.table('{yi}', header = T)
xtyi.files <- strsplit('{files}', ':')[[1]]
ps <- strsplit('{pvals}', ':')[[1]]
```

# Plots

```{{r, results='asis'}}
for(i in 1 : length(xtyi.files)) {{
  xtyi <- read.table(xtyi.files[i], header = T)
  xtyi$SNP <- as.character(xtyi$SNP)
  xtyi <- xtyi[order(xtyi$SNP), ]
  p <- ps[i]
  cat('##', 'Cutoff =', p, '\\n')
  cat('\\n')
  cat('\\n')
  cat('Filename is', as.character(yi[i, 1]))
  cat('\\n')
  pander(yi[i, 2:ncol(yi)])
  qqplot((1 : length(xt$P)) / length(xtyi$P), xtyi$P, main = 'QQplot - Gi: Y ~ Gi', xlab = 'expected pval', ylab = 'observed pval'); abline(a = 0, b = 1, col = 'red')
  qqplot((1 : length(xtyi[xtyi$TEST == 'ADD', 'P'])) / length(xtyi[xtyi$TEST == 'ADD', 'P']), xtyi[xtyi$TEST == 'ADD', 'P'], main = 'QQplot - Gi: Y ~ Gi + I', xlab = 'expected pval', ylab = 'observed pval'); abline(a = 0, b = 1, col = 'red')
  qqplot((1 : length(xtyi[xtyi$TEST == 'PRS', 'P'])) / length(xtyi[xtyi$TEST == 'PRS', 'P']), xtyi[xtyi$TEST == 'PRS', 'P'], main = 'QQplot - I: Y ~ Gi + I', xlab = 'expected pval', ylab = 'observed pval'); abline(a = 0, b = 1, col = 'red')
  plot(xt$P, xtyi[xtyi$TEST == 'ADD', 'P'], main = 'P-value of Gi: Gi + I vs Gi', xlab = 'Gi', ylab = 'Gi + I')
  cat('\\n')
  cat('\\n')
}}
```
'''.format(xt = input.xt, files = params.files, pvals = params.pvals, yi = input.yi, y = params.y, i = params.i)
        o = open(output[0], 'w')
        o.write(rmd)
        o.close()

rule plot_report_exec:
    input:
        'output-direction_XT_YI/{intermediate}__{geno1}__{geno2}/direction_report.Rmd'
    output:
        'output-direction_XT_YI/{intermediate}__{geno1}__{geno2}/direction_report.html'
    shell:
        '''
        R -e "rmarkdown::render('{input[0]}')"
        '''
