# this module run interaction test
# Y_T \sim Y_I + SNPi + Y_I \cdot SNPi
# Note that the test can be run on a subset of SNP set

# subset strategy
# 1. functional subsetting
# hypothesis: if Y_I and X_T affect Y_T through the same pathway, they tend to interact with each other
# procedure: identify SNPi that affects Y_T and Y_I in the way that Y_T ~ SNPi is consistent with (can be explained by) Y_I ~ SNPi and Y_T ~ Y_I

include: 'direction_XT_YI.snakemake'

# for debug
def get_subsettest(config, subset):
    out = get_ldpred_outputs_ext('output-run_step2/{yt}/interaction.{subset}'.format(yt = config['y'] + '__' + config['x1'] + '__' + config['x2'], subset = subset), config['ldpred']['causal-fraction'], '.assoc.logistic')
    return out
def plot_subsettest(config, subset):
    out = 'output-run_step2/{intermediate}__{geno1}__{geno2}/inter_report.{subset}.html'.format(intermediate = config['y'], geno1 = config['x1'], geno2 = config['x2'], subset = subset)
    return out
rule all_funcset:
    input:
        'output-run_step2/{intermediate}__{geno1}__{geno2}/func_subset.set'.format(intermediate = config['y'], geno1 = config['x1'], geno2 = config['x2'])
rule all_functest:
    input:
        get_subsettest(config, 'func_subset')
rule all_sigtest:
    input:
        get_subsettest(config, 'sig_subset')
rule all_funcplot:
    input:
        plot_subsettest(config, 'func_subset')
rule all_sigplot:
    input:
        plot_subsettest(config, 'sig_subset')
# end debug

rule functional_subsetting:
    input:
        ytyi = 'output-direction_XT_YI/{intermediate}__{geno1}__{geno2}/yi.logistic.assoc',
        ytxt = 'output-direction_XT_YI/{intermediate}__{geno1}__{geno2}/xt.assoc.logistic',
        yixt = '../step1/output-prepare_betaI/{intermediate}/beta-ss.txt.gz'
    params:
        threshold = config['functional-subsetting']['pval-theshold'],
        pattern = config['yi-pattern']
    output:
        'output-run_step2/{intermediate}__{geno1}__{geno2}/func_subset.set'
    shell:
        'Rscript scripts/functional_subsetting.R \
            --ytyi {input.ytyi} \
            --ytxt {input.ytxt} \
            --yixt {input.yixt} \
            --pval_theshold {params.threshold} \
            --pattern {params.pattern} \
            --out {output[0]}'

rule significance_subsetting:
    input:
        ytyi = 'output-direction_XT_YI/{intermediate}__{geno1}__{geno2}/yi.logistic.assoc',
        ytxt = 'output-direction_XT_YI/{intermediate}__{geno1}__{geno2}/xt.assoc.logistic'
    params:
        threshold = config['sigificance-subsetting']['pval-theshold'],
        pattern = config['yi-pattern']
    output:
        'output-run_step2/{intermediate}__{geno1}__{geno2}/sig_subset.set'
    shell:
        'Rscript scripts/significance_subsetting.R \
            --ytyi {input.ytyi} \
            --ytxt {input.ytxt} \
            --pval_theshold {params.threshold} \
            --pattern {params.pattern} \
            --out {output[0]}'

rule test_interaction_by_set:
    input:
        yi = get_ldpred_outputs_ext('output-direction_XT_YI/{intermediate}__{geno1}__{geno2}/covar', '{pval}', '.txt'),
        e = lambda wildcards: get_format(wildcards.geno1 + '__' + wildcards.geno2, config) + '.bed',
        i = lambda wildcards: get_format(wildcards.geno1 + '__' + wildcards.geno2, config) + '.bim',
        f = lambda wildcards: get_format(wildcards.geno1 + '__' + wildcards.geno2, config) + '.fam',
        subset = 'output-run_step2/{intermediate}__{geno1}__{geno2}/{subset}.set'
    params:
        genotype = lambda wildcards: get_format(wildcards.geno1 + '__' + wildcards.geno2, config),
        oprefix = lambda wildcards:  get_ldpred_outputs_ext('output-run_step2/{i}__{g1}__{g2}/interaction.{subset}'.format(i = wildcards.intermediate, g1 = wildcards.geno1, g2 = wildcards.geno2, subset = wildcards.subset), wildcards.pval, ''),
        pattern = config['yi-pattern']
    output:
        o = get_ldpred_outputs_ext('output-run_step2/{intermediate}__{geno1}__{geno2}/interaction.{subset}', '{pval}', '.assoc.logistic')
    shell:
        'python scripts/interaction_by_set.py \
            --inputs {input.yi} \
            --output {params.oprefix} \
            --geno_prefix {params.genotype} \
            --set {input.subset} \
            --pattern {params.pattern}'

rule report_top_interaction_rmd:
    input:
        funcset = 'output-run_step2/{intermediate}__{geno1}__{geno2}/{subset}.set',
        inter = get_ldpred_outputs_ext('output-run_step2/{intermediate}__{geno1}__{geno2}/interaction.{subset}', config['ldpred']['causal-fraction'], '.assoc.logistic'),
        prs  = get_ldpred_outputs_ext('../step1/output-run_step1/{intermediate}__{geno1}__{geno2}/ldpred', config['ldpred']['causal-fraction'], '.txt'),
        xtyi = get_ldpred_outputs_ext('output-direction_XT_YI/{intermediate}__{geno1}__{geno2}/xtyi', config['ldpred']['causal-fraction'], '.assoc.logistic')
    params:
        fractions = config['ldpred']['causal-fraction'],
        interfiles = ':'.join(get_ldpred_outputs_ext('output-run_step2/{intermediate}__{geno1}__{geno2}/interaction.{subset}', config['ldpred']['causal-fraction'], '.assoc.logistic')),
        xtyifiles = ':'.join(get_ldpred_outputs_ext('output-direction_XT_YI/{intermediate}__{geno1}__{geno2}/xtyi', config['ldpred']['causal-fraction'], '.assoc.logistic')),
        prsfiles = ':'.join(get_ldpred_outputs_ext('../step1/output-run_step1/{intermediate}__{geno1}__{geno2}/ldpred', config['ldpred']['causal-fraction'], '.txt'))
    output:
        temp('output-run_step2/{intermediate}__{geno1}__{geno2}/inter_report.{subset}.Rmd')
    run:
        rmd = '''---
title: "Epistasis - Y ({y}); I ({i})"
date: "`r format(Sys.time(), '%B %d, %Y')`"
author: Yanyu Liang
output:
  html_document:
    toc: true
    toc_float: true
---

```{{r setup, echo=FALSE}}
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
library(ggplot2)
library(pander)
root.dir <- '../../'
# knitr::opts_knit$set(root.dir = '../../')
panderOptions('knitr.auto.asis', FALSE)
panderOptions('table.split.table', Inf)
subchunkify <- function(g, fig_asp = 1) {{
  g_deparsed <- paste0(deparse(
    function() {{g}}
  ), collapse = '')

  sub_chunk <- paste0("`","``{{r sub_chunk_", floor(runif(1) * 10000), ", fig.asp=", fig_asp, ", echo=FALSE}}",
  "\\n(",
    g_deparsed
    , ")()",
  "\\n`","``")

  cat(knitr::knit(text = knitr::knit_expand(text = sub_chunk), quiet = TRUE))
}}
```

# Read data

```{{r}}
source(paste0(root.dir, 'scripts/myRLib.R'))
funcset <- readLines(paste0(root.dir, '{funcset}'))
funcset <- parseFuncSet(funcset)
funcset.names <- names(funcset)
xtyi.files <- strsplit('{xtyifiles}', ':')[[1]]
ps <- strsplit('{fractions}', ',')[[1]]
inter.files <- strsplit('{interfiles}', ':')[[1]]
prs.files <- strsplit('{prsfiles}', ':')[[1]]
```

# Epistasis

```{{r, results='asis'}}
for(i in 1 : length(xtyi.files)) {{
  cat('##', funcset.names[i])
  cat('\n')
  cat('\n')
  snp.subset <- funcset[[funcset.names[i]]]

  # read I ~ SNP
  prs <- read.table(paste0(root.dir, prs.files[i]), header = T)
  prs$sid <- as.character(prs$sid)
  prs.sub <- prs[prs$sid %in% snp.subset, ]

  # read others
  xtyi <- read.table(paste0(root.dir, xtyi.files[i]), header = T)
  xtyi$SNP <- as.character(xtyi$SNP)
  yt.xtyi <- xtyi[(xtyi$SNP %in% snp.subset) & (xtyi$SNP %in% prs.sub$sid), ]
  yt.xtyi.xt <- yt.xtyi[yt.xtyi$TEST == 'ADD', ]
  yt.xtyi.yi <- yt.xtyi[yt.xtyi$TEST == 'PRS', ]
  inter <- read.table(paste0(root.dir, inter.files[i]), header = T)
  inter$SNP <- as.character(inter$SNP)
  inter <- inter[inter$TEST == 'ADDxPRS', ]
  yt.inter <- inter[(inter$SNP %in% snp.subset) & (inter$SNP %in% prs.sub$sid), ]

  # order all rows
  yt.xtyi.xt <- yt.xtyi.xt[order(yt.xtyi.xt$SNP), ]
  yt.xtyi.yi <- yt.xtyi.yi[order(yt.xtyi.yi$SNP), ]
  yt.inter <- yt.inter[order(yt.inter$SNP), ]
  prs.sub <- prs.sub[order(prs.sub$sid), ]

  # check direction
  prs.sub$nt1 <- as.character(prs.sub$nt1)
  yt.xtyi.xt$A1 <- as.character(yt.xtyi.xt$A1)
  yt.inter$A1 <- as.character(yt.inter$A1)
  if(sum(prs.sub$nt1 != yt.xtyi.xt$A1) != 0 | sum(prs.sub$nt1 != yt.inter$A1) != 0) {{
    print('Direction does not match. Exit!')
    quit()
  }}

  yt.xtyi.xt.mean.std <- getMeanStd(yt.xtyi.xt$SNP, yt.xtyi.xt$P, yt.xtyi.xt$OR, 'Y~Gi+I (Gi)')
  yt.xtyi.yi.mean.std <- getMeanStd(yt.xtyi.yi$SNP, yt.xtyi.yi$P, yt.xtyi.yi$OR, 'Y~Gi+I (I)')
  yt.inter.mean.std <- getMeanStd(yt.inter$SNP, yt.inter$P, yt.inter$OR, 'Y~Gi*I')
  prs.sub.mean.std <- data.frame(SNP = prs.sub$sid, Mean = prs.sub$ldpred_beta, Std = 0, Type = 'I~Gi')

  # create data frame for plot
  df <- rbind(yt.xtyi.xt.mean.std, yt.xtyi.yi.mean.std, prs.sub.mean.std, yt.inter.mean.std)
  ratio <- max(1, nrow(yt.inter) / 40)
  cat
  p <- ggplot(df) + geom_point(aes(x = SNP, y = Mean)) + geom_errorbar(aes(x = SNP, ymin = Mean - 1.96 * Std, ymax = Mean + 1.96 * Std), colour = "black", width = .1) + geom_hline(yintercept = 0, color = 'red') + facet_grid(. ~ Type, scales = 'free_x') + coord_flip() + theme(axis.text.x=element_text(angle=90,hjust=1))
  p2 <- ggplot(yt.inter) + geom_bar(aes(x = SNP, y = -log10(P)), stat = 'identity') + coord_flip() + ggtitle('Interaction P-value')
  subchunkify(p, ratio)
  subchunkify(p2, ratio)
  cat('\n')
  inter.plus.gwas.pval <- cbind(yt.inter, yt.xtyi.xt$P)
  colnames(inter.plus.gwas.pval) <- c(colnames(yt.inter), 'GWAS.P')
  pander(inter.plus.gwas.pval[order(inter.plus.gwas.pval$P, decreasing = F), ])
  cat('\n')
  cat('\n')
}}
```
'''.format(funcset = input.funcset, xtyifiles = params.xtyifiles, fractions = params.fractions, interfiles = params.interfiles, prsfiles = params.prsfiles, y = wildcards.geno1, i = wildcards.intermediate)
        o = open(output[0], 'w')
        o.write(rmd)
        o.close()

rule report_top_interaction_html:
    input:
        'output-run_step2/{intermediate}__{geno1}__{geno2}/inter_report.{subset}.Rmd'
    output:
        'output-run_step2/{intermediate}__{geno1}__{geno2}/inter_report.{subset}.html'
    shell:
        '''
        R -e "rmarkdown::render('{input[0]}')"
        '''
