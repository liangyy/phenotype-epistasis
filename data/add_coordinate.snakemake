# this module adds genomic coordinate to rsID

rule all:
    input:
        'add-coordinate/{name}.with-coordinate.gz'.format(name = config['filename'])

rule rs_list:
    input:
        lambda wildcards: config[wildcards.name]['name']
    params:
        rsid = lambda wildcards: config[wildcards.name]['rsid'],
        cat = lambda wildcards: config[wildcards.name]['cat'],
        sep = lambda wildcards: config[wildcards.name]['sep'],
        header = lambda wildcards: config[wildcards.name]['header']
    output:
        'add-coordinate/{name}.rsid'
    shell:
        '''
        {params.cat} {input[0]} {params.header} | awk -F"{params.sep}" '{{print ${params.rsid}}}' > {output[0]}
        '''

rule annotate:
    input:
        temp('add-coordinate/{name}.rsid')
    params:
        dbname = config['dbname'],
        dbdir = config['dbdir']
    output:
        'add-coordinate/{name}.avinput'
    shell:
        '''
        convert2annovar.pl -format rsid {input[0]} -dbsnpfile {params.dbdir}/{params.dbname} > {output[0]}
        '''

rule merge:
    input:
        pos = temp('add-coordinate/{name}.avinput'),
        inp = lambda wildcards: config[wildcards.name]['name']
    params:
        rsid = lambda wildcards: config[wildcards.name]['rsid'],
        cat = lambda wildcards: config[wildcards.name]['cat'],
        sep = lambda wildcards: config[wildcards.name]['sep'],
        header = lambda wildcards: config[wildcards.name]['header'],
        ref = lambda wildcards: config[wildcards.name]['ref'],
        alt = lambda wildcards: config[wildcards.name]['alt']
    output:
        'add-coordinate/{name}.with-coordinate.gz'
    shell:
        '''
        awk 'NR==FNR{{a[$6"-"$4"-"$5]=$0;next}}{{
            if(a[${params.rsid}"-"${params.ref}"-"{params.alt}]!="")
                print a[${params.rsid}"-"],$1,$2;
                next;
            else
                next;
        }}' FS="\t" <(cat < {input.pos} | tr -d '\r') FS="{params.sep}" OFS="{params.sep}" <({params.cat} {input.inp} {params.header} | tr -d '\r') | gzip > {output[0]}
        '''
