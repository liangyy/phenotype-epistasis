# this module uses ANNOVAR to add allele frequency to the input summary statistic file

rule all:
    input:
        'add-maf/{name}.with-maf.gz'.format(name = config['filename'])

rule prepare_input:
    input:
        lambda wildcards: config[wildcards.name]['name'],
    params:
        chr = lambda wildcards: config[wildcards.name]['chr'],
        pos = lambda wildcards: config[wildcards.name]['pos'],
        ref = lambda wildcards: config[wildcards.name]['ref'],
        alt = lambda wildcards: config[wildcards.name]['alt'],
        meta = lambda wildcards: config[wildcards.name]['meta'],
        sep = lambda wildcards: config[wildcards.name]['sep'],
        cat = lambda wildcards: config[wildcards.name]['cat']
    output:
        temp('add-maf/{name}.avinput')
    shell:
        '''
        awk 'NR==FNR{{a[${params.meta}]=length(${params.ref});next}}${params.meta}!=""{{print ${params.chr},${params.pos},${params.pos}-1+a[${params.meta}],${params.ref},${params.alt},${params.meta};next}}' OFS='\\t' FS="{params.sep}" <({params.cat} < {input[0]}) OFS='\\t' FS="{params.sep}" <({params.cat} < {input[0]}) > {output[0]}
        '''

rule annovar:
    input:
        'add-maf/{name}.avinput'
    output:
        'add-maf/{{name}}.{suffix}'.format(suffix = config['suffix'])
    params:
        dbtype = config['dbtype'],
        buildver = config['buildver'],
        prefix = 'add-maf/{name}',
        dbdir = config['dbdir']
    shell:
        'annotate_variation.pl -filter -dbtype {params.dbtype} -buildver {params.buildver} -out {params.prefix} {input[0]} {params.dbdir}'

rule merge:
    input:
        maf = 'add-maf/{{name}}.{suffix}'.format(suffix = config['suffix']),
        inp = lambda wildcards: config[wildcards.name]['name']
    params:
        meta = lambda wildcards: config[wildcards.name]['meta'],
        sep = lambda wildcards: config[wildcards.name]['sep'],
        cat = lambda wildcards: config[wildcards.name]['cat']
    output:
        'add-maf/{name}.with-maf.gz'
    shell:
        '''
        awk 'NR==FNR{{a[${params.meta}]=$0;next}}{{print a[$8]$2;next}}' FS="{params.sep}" <({params.cat} < {input.inp}) OFS="{params.sep}" FS="\\t" <(cat < {input.maf}) | gzip > {output[0]}
        '''
